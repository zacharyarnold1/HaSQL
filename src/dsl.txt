DSL Syntax

Querying a table (GET statement):
    [GET] (list of columns/attributes that user wishes to return, required, seperated by commas)
    [IN] (name of table user wishes to retrieve data from, required)
    [IF] (boolean statement where if true, that record is returned, and if false, that record is not returned)

    Example:
    I want the name and ages of all my classmates who are younger than 20...
    [GET] (name, age) -> columns I would like to retrieve
    [IN] (classmates) -> table I would like to retrieve data from
    [IF] (age < 20) -> I only want to the name and ages of classmates if there age < 20
    Should be written as:
    [GET] (name, age) [IN] (classmates) [IF] ({age < 20})

    Additional keywords:
    * -> All columns in the table should be returned
        Example:
        Consider a table called 'Employees' with columns 'name', 'age', 'hometown', 'division', 'seniority', and 'boss'. 
        If I want the 'name', 'age', 'hometown', 'division', 'seniority', and 'boss' of all employees who's hometown is Philadelphia, I could write the following query:
        [GET] * [IN] (Employees) [IF] ({hometown == 'Philadelphia'})
    
Creating a table (MAKE statement):
    [MAKE] (name of table, must contain only characters A-Z and '_') (list of column name  + datatype tuples, in the order they should appear in the table, names must contain only letters A-Z and '_')

    Example:
    I want to create a table called 'Classmates' with columns name (string), age (integer), grade (int), home_address (string)...
    [MAKE] (Classmates) [WITH] ({name, string}, {age, integer}, {grade, integer}, {home_address, string})

Insert data into a table (PUT statement):
    [PUT] (table name) [WITH] (list of values, seperated by commas, strings should be enclosed in quotations) (list of columns these values should be inserted into)

    Important restrictions:
    - each PUT statement creates a new record (row) in the table that you are inserting into
    - the order in which the values appear is the order in which they will be inserted  
        - i.e., the n'th value of the value list will be inserted into the n'th column in the column list 
    - the value being inserted must match the type of the column it is being inserted into
        - string values should be wrapped in quation marks, ''
    - any column that is not receiving a value will take on a NILVAL
        - i.e., if you insert a value into every column of a table except for column 'name', 'name' will take on NILVAL for the record that is currently being inserted. 
    
    Example: 
    I have a table called 'Students' with columns name (string), age (int), grade (int), behavior (string). The table currently has 25 recrods (row).
    A new student joined the class. His name is Kailash, his age is 10, his grade is 5th, and his behavior I do not know yet. I want to add this student to my database of students...
    [PUT] (Students) [WITH] ({name, 'Kailash'}, {age, 10}, {grade, 5})

    The table students will now have 26 records. The record for the student named 'Kailash' will have a NILVAL in the behavior column.

Updating data in an existing table (CHANGE statement):
    [CHANGE] (table name) 
    [TO] (list of declaritive statements enclosed in braces, seperated by commas) 
    [IF] (boolean statement where if true, that record is returned, and if false, that record is not returned)

    Declartive statements:
        - of the form: {'column name', 'value'}
    
    Important restrictions: 
        - in the declarative statement, the column name must exist in the table being updated, and the value must match the type of that column
        - in the declaritive statement, if the value is a string, it should be enclosed in quotations
    
    Example:
    I have a table called 'Students' with columns name (string), age (int), grade (int), behavior (string).
    The 7th graders collectively had terrible behavior at recess. The user wishes to updated her gradebook accordingly...

    [CHANGE] (Students) [TO] ({behavior, 'terrible'}) [IF] ({grade == 7})

Deleting records in an existing table (REMOVEFROM statement):
    [REMOVEFROM] (table name)
    [IF] (boolean statement where if true, that record is returned, and if false, that record is not returned)

    Important restrictions: 
        - this command deletes entire records that fit the [IF] clause
    
    Example:
    I have a table called 'Students' with columns name (string), age (int), grade (int), behavior (string).
    All students with terrible behavior were expelled from the school...

    [REMOVEFROM] (Students) [IF] ({behavior == 'terrible'})

Where clauses:
    All [IF] blocks should be followed by a where clause. All where clauses should be enclosed in brackets.
    Where clauses can be logical conjuctions of other where clauses. The availble conjuctors are 'AND', 'OR', and 'NOT'

    Example:
    I want records only if age is greater than 20 and name is Kailash.... 
    [IF] ({{age > 20} AND {name == 'Kailash'}})

    I want records only if age is greater than 20 and there name is either Zach and Kailash.... 
    [IF] ({{age > 20} AND {{name == 'Kailash'} OR {name == 'Zach'}}})


[LET] (....) [BE] (temp table name) [GET] ...

[GET] (*) [IN] ({(t1) [JOIN] {(t2) [JOIN] (t3) [ON] (condition)} [ON] (condition)})


INNERJOIN = MATCH 
LEFTJOIN = MATCHLEFT
RIGHTJOIN = MATCHRIGHT
FULLJOIN = MATCHFULL
NATURALJOIN = MATCHREG
ON = SUCHTHAT
